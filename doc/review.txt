
Review Cycle	Up to date
Submitted on	6/28/16 4:46 PM
Argumentation	
Summary

The paper gives an account of what the author considers problems plauging the OMG metamodeling practice and proposes solutions based on 1) equating metamodels to
ontologies of a terminology vocabulary and using ontology terminology refinement as the basis for multi-level (meta) modeling, and 2) serializing models in terms of their irreducible content as normal form relational data, which potentially allow leveraging them with data analytics platforms. 

Points to improve:

- The abstract is very long. Consider shortening it by summarizing the problem and the contribution (use 250 words limit as a guidline). Move the details from the abstract to an introduction section that starts by the motivation for the problem described in the paper and highlights the contribution of the paper (clearly separating it out from the background). Currently, the contrbution seems to appear at the end of section 1 (page 4), after many detailed discussions.

- The current section 1 represets background and should be section 2 after the introduction. There are many scattered (sometimes nested) ideas in section 1 around why MOF, especially relationships, are broken making it hard to follow. I propose starting this section with a paragrph that summarizes these ideas. Also, I propose re-organizing the section to remove the nesting of ideas.

- There are several cases where the paper uses "we did this", "we did that", with the assumption that the reader understands that the author is part of the UML or MOF RTFs. This has not been disclosed beforehand, making it not obvious for someone unfamiliar with the author.

- There is too much discussion of intimate details of the UML and MOF metamodels (e.g., StructuredActivityNode issues in page 3) without proper introduction. This makes the paper only addressed at MOF metamodeling experts. I propose either abstracting the ideas or properly introducing them.

- Regarding the sentence, "there is no evidence in the OMG specifications to suggest that the proven principles of information modeling with the relational model were taken into consideration." Can you state how are those principles been proven? and by who? any reference?

- EMF is discussed in section 2 without proper introduction.

- The argument (on page 5) that EMF supports association-owned ends only through code generation, hence navigating a model requires knowledge of the code generation technique used, is not accurate. EMF supports looking up reverse references (for non-class owned ends) by a configuration in the resource set that loads the models, regardless of the whether the metamodel has a generated code or not (when its models are loaded reflectively). The support is through an EMF API that returns all the referencers for a given object, which can be filtered down by a specific reference feature. The API achieves this by keeping a reverse look up map, which can be populated in various ways (upon model loading or through an indexer).

- The conclusion (at end of section 1.1) "Therefore, one must conclude that class+association are first-class concepts and that property isn’t." doe not seem to follow from the discussion before it. Why does the allegiation that EMF does not support association-owned ends uniformly through API imply that property isn't a first-class concept? Also, as you later said, Property in MOF is used to represent attributes (typed with primitive types), which is different from their use as references or association-ends, but you did not make this distinction in this conclusion. Also, notice that EMF, unlike EMOF, distinguishes between EAttributes and EReferences, both of which correspond to Property in MOF.

- The concept of link (association instance) is discussed (on page 6) without proper introduction.

- There are references to impact of various points on OCL, without proper introduction to OCL, or concrete examples of such impacts.

- It is not clear what is meant by "Since nagivation is irrelevant for the purposes of OCL." If the intension is to say that OCL can navigate to derived properties and also to non-class owned properties, then you have to note the exception to the latter when such navigation is confusing (two association-owned properties having the same name from the same context).

- The requirement of having an operation with the same name as a derived property is just a convention of the UML specification, and not a normative semantic in MOF. Alternatively, the derivation of a property can be specified with a constraint in the owning namespace.

- It is not obvious how "Figure 1 shows the result of carrying out these simplification steps to the fundamental constructs." There is little discussion of the proposed changes. Also, I recommend showing the deleted artifacts (e.g., properties) with a X or stirke-through them.

- The alleged complexity of the circular dependency between UML and MOF is mostly  due to the history of both specs first having separate metamodels then using the same. In fact, the circular dependency is not totally unexpected, since in any such language architecture, you need to bootstrap it (e.g., OWL is defined using itself, XSD is defined using XSD, etc.), which leads to such circular dependency. It can simply be explained as UML is defined using a subset of itself (called the MOF subset).

- The claim that "OCL’s emphasis on the query semantics of navigating association end properties stands in contrast with UML’s emphasis on the value semantics of association end properties and on the class/property object oriented view of associations" is not further elaborated.

- The discussion around UML ReadExtentAction assumes the reader knows a lot than should be expected.

- The changes proposed in the UML metamodel by introducing the "M" classes as akin to distinguishing again the abstract syntax for CMOF and UML. The motivation for the abolishing the distinction has been based on the realization that MOF models have historically been modeled with UML tool without much annotation. It is not very clear from the discussion in the papr why going back to having distinct abstrac syntaxes is a good idea. What is conceptually different between Association and MAssociation, or Class and MClass?

- The paragraph titled "Simplifying and promoting aggregation" proposes to "... distinguishes the roles of CMOF MetaAssociation and of MetaAssociationEnd with respect to aggregation." I do not understand how aggregation, which is about speciying the deletion semantics of referenced objects, would be simplified by specializing metaclass Property. Also, can you explain how aggregation is "promoted" in the changed metamodel in Figure 2?

- Can you clarify how having two metaclasse called AssociationSourceEnd and AssociationTargetEnd different from having an ordered memberEnd collection where the first end represents the source and the second represents the target? Wouldn't the latter equivalent semantically without syntactic change?

- In Figure 3, how can models import libraries? don't you want Model to have Imports relationship to Resource (instead of Model)?

- What is OntoClean? Please introduce this the first time it's referenced.

- "Data vocabularies are the exclusive province of libraries." Why is this limitation necessary? What's wrong with libraries of reusable entities and relationships?

- According to 3.1, "Conceptual vocabularies are the exclusive provinceof metamodels and profiles. Data vocabularies are the exclusive province of libraries.", where does this leave Models, which are neither libraries nor metamodels/profiles? You don't talk about them in this context.

- I don't understand how adding a uuid to StructuredValue makes it simpler to manage change than OMG's XMI. Aren't data values supposed to unique by value and now you're adding a uuid to them implying their uniqueness by id? Also, can you give an example of how XMI is complex in change management and your solution is simpler? It's not clear now (especially the last few lines in section 3.1).

- You claim that your simplification "is substantially simpler and more comprehensive than in current OMG specifications." How do you measure that quantitatively and qualitatively? I don't see any validation.

- "Switching to a serialization paradigm based on the normalized schemas described in Sec. 3 will provide tangible model interchange benefits." Do you have any experiments to report on that validates this theory?

- "Switching to a normalized serialization strategy eliminates altogether the distinction for local vs. cross references ... because all elements are referenced, locally or externally, via their uuid." Couldn't you achieve the same benefit using XMI's uuid instead of idref? What's the difference between that and your approach? In both cases, you need to configure a scope for the system to look up those elements by uuids. In the case of XMI, it's the collection of documents in scope, in your approach, it's the collection of databases in scope.

- You discuss the incompatibilty of the modeling tools' APIs and say that it is "primarily because these generated modeling APIs are tightly coupled with their generated implementation." Well, the OMG does not standardize on a programatic API so this is not unexpected. Also, you get an induced standardized API through OCL/QVT, which when implemented based on the spec only should provide interoperability. The fact that you do not get interoperability in practice is a side effect of tools exposing their extensions to the abstract syntax in those environments. I say it is a choice because they could have provided them in ways that do not make them exposed. So in other words, it is an explicit choice that these tools do, rather than a limitation of the technology (e.g., EMF supports both choices). Putting these extensions in separate normalized tables (to address what you call information content concerns) does not really address the problem, since if such tables were also made avaiable to query/transform writers, and they used them, they will still end up with tool-specifi queries/transforms.

- The claim that having modeling data in normalized tables potentially allows "for scaling up complex modeling workflows" needs to be verified. Consider making a future works section to mention all these points where you made claims that need to be verified.

Typos to fix:

Page 2, Paragraph 1, Line 1: classes (not alasses)
Page 5, Paragraph 2, Line 5: debate (not debated)
Page 6, Paragraph 5, Line 6: This senstence is itself confusing: "This redundancy creates unecessary confusion where a derived association has a derived metaclass-owned but a non-derived association-owned end!".
Page 11, last paragraph, "defnied in" is repeated twice
